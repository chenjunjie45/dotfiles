{
  "version": 3,
  "sources": ["../src/strength.tsx", "../src/utils/generators.ts", "../src/utils/constants.ts", "../src/hooks/usePreferences.ts", "../src/utils/product.ts", "../src/ListItem.tsx", "../src/utils/getStrengthIcon.ts"],
  "sourcesContent": ["import { useEffect, useState } from \"react\";\nimport { List } from \"@raycast/api\";\n\nimport type { PasswordGenerator } from \"./utils/types\";\nimport {\n  AlphanumGenerator,\n  AsciiGenerator,\n  DictionaryGenerator,\n  HexGenerator,\n  NumericGenerator,\n  PronounceableGenerator,\n} from \"./utils/generators\";\nimport { ENTROPY_PER_LEVEL } from \"./utils/constants\";\nimport ListItem from \"./ListItem\";\nimport usePreferences from \"./hooks/usePreferences\";\n\nexport default function Command(): JSX.Element {\n  const [loading, setLoading] = useState(true);\n  const [strengthLevel, setStrengthLevel] = useState(\"\");\n  const [passwords, setPasswords] = useState<PasswordGenerator[]>([]);\n\n  const { strength: defaultPasswordStrength } = usePreferences();\n\n  const generatePasswords = (): void => {\n    if (parseInt(strengthLevel) > 0 || strengthLevel === \"\") {\n      const strength = (parseInt(strengthLevel, 10) || defaultPasswordStrength) * ENTROPY_PER_LEVEL;\n\n      setPasswords([\n        new DictionaryGenerator({ strength }),\n        new PronounceableGenerator({ strength }),\n        new AsciiGenerator({ strength }),\n        new AlphanumGenerator({ strength }),\n        new NumericGenerator({ strength }),\n        new HexGenerator({ strength }),\n      ]);\n    }\n  };\n\n  useEffect(() => {\n    generatePasswords();\n    setLoading(false);\n  }, [strengthLevel]);\n\n  return (\n    <List\n      isLoading={loading}\n      searchText={strengthLevel}\n      onSearchTextChange={setStrengthLevel}\n      navigationTitle=\"Generate password of given strength\"\n      searchBarPlaceholder=\"Generate password of given strength\"\n    >\n      {passwords.map((generator) => (\n        <ListItem key={generator.id} generator={generator} generatePasswords={generatePasswords} />\n      ))}\n    </List>\n  );\n}\n", "import { randomInt } from \"crypto\";\nimport { readFileSync } from \"fs\";\n\nimport { ASCII_CHARACTERS, NUMBERS } from \"./constants\";\nimport usePreferences, { Preferences } from \"../hooks/usePreferences\";\nimport product from \"./product\";\n\nexport class PasswordGenerator {\n  id?: string;\n  title?: string;\n  password: string;\n  strength = 0;\n  preferences: Preferences;\n\n  constructor({ strength, length }: { strength?: number; length?: number }) {\n    this.preferences = usePreferences();\n\n    const [password, passwordStrength] = this.generate({ strength, length });\n    this.password = password;\n    this.strength = passwordStrength;\n  }\n\n  generate({ strength, length }: { strength?: number; length?: number }): [string, number] {\n    const pw = [];\n    if (strength) {\n      length = Math.ceil(strength / this.entropy);\n    }\n\n    // Just to make typescript happy\n    length = length as number;\n\n    for (let i = 0; i < length; i++) {\n      pw.push(this.data[randomInt(this.data.length)]);\n    }\n\n    return [pw.join(\"\"), Math.floor(this.entropy * pw.length)];\n  }\n\n  get entropy(): number {\n    return Math.log2(this.data.length);\n  }\n\n  get data(): string | string[] {\n    return \"\";\n  }\n}\n\nexport class AsciiGenerator extends PasswordGenerator {\n  id = \"ascii\";\n  title = \"ASCII characters with punctuation\";\n\n  get data(): string {\n    return ASCII_CHARACTERS + NUMBERS + this.preferences.specialCharacters;\n  }\n}\n\nexport class AlphanumGenerator extends PasswordGenerator {\n  id = \"alphanumeric\";\n  title = \"ASCII characters, no punctuation\";\n\n  get data(): string {\n    return ASCII_CHARACTERS + NUMBERS;\n  }\n}\n\nexport class HexGenerator extends PasswordGenerator {\n  id = \"hex\";\n  title = \"Hexadecimal characters\";\n\n  get data(): string {\n    return \"0123456789abcdef\";\n  }\n}\n\nexport class NumericGenerator extends PasswordGenerator {\n  id = \"numeric\";\n  title = \"Digits only\";\n\n  get data(): string {\n    return NUMBERS;\n  }\n}\n\nexport class DictionaryGenerator extends PasswordGenerator {\n  id = \"dictionary\";\n  title = \"Dictionary words\";\n  words: string[] = [];\n\n  private password_by_iterations(iterations: number): [string, number] {\n    const pw = [];\n    for (let index = 0; index < iterations; index++) {\n      const word = this.data[randomInt(this.data.length)];\n      pw.push(word[0].toUpperCase() + word.substring(1) + Math.floor(Math.random() * 9 + 1));\n    }\n\n    return [pw.join(this.preferences.delimiter), Math.floor(this.entropy * iterations)];\n  }\n\n  private password_by_length(length: number): [string, number] {\n    const pw = [];\n    let pw_length = 0;\n\n    while (pw_length < length) {\n      const word = this.data[randomInt(this.data.length)];\n      pw.push(word[0].toUpperCase() + word.substring(1) + Math.floor(Math.random() * 9 + 1));\n      pw_length += word.length + 2;\n    }\n\n    return [pw.join(this.preferences.delimiter), Math.floor(this.entropy * pw.length)];\n  }\n\n  generate({ strength, length }: { strength?: number; length?: number }): [string, number] {\n    if (strength) {\n      return this.password_by_iterations(Math.ceil(strength / this.entropy));\n    } else {\n      return this.password_by_length(length as number);\n    }\n  }\n\n  get data(): string[] {\n    if (this.words) return this.words;\n    try {\n      this.words = readFileSync(\"/usr/share/dict/words\", \"utf8\").split(/\\r?\\n/);\n\n      return this.words;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  }\n}\n\nexport class PronounceableGenerator extends DictionaryGenerator {\n  id = \"pronounceable\";\n  title = \"Pronounceable, (mostly) nonsense words\";\n\n  get data(): string[] {\n    const initial_consonants = [\n      \"b\",\n      \"bl\",\n      \"br\",\n      \"cl\",\n      \"cr\",\n      \"d\",\n      \"dr\",\n      \"f\",\n      \"fl\",\n      \"fr\",\n      \"g\",\n      \"gl\",\n      \"gr\",\n      \"h\",\n      \"j\",\n      \"k\",\n      \"l\",\n      \"m\",\n      \"n\",\n      \"p\",\n      \"pl\",\n      \"pr\",\n      \"r\",\n      \"s\",\n      \"sk\",\n      \"sl\",\n      \"sm\",\n      \"sn\",\n      \"sp\",\n      \"st\",\n      \"str\",\n      \"sw\",\n      \"t\",\n      \"tr\",\n      \"v\",\n      \"w\",\n      \"y\",\n      \"z\",\n    ];\n    const final_consonants = [\n      \"b\",\n      \"ct\",\n      \"d\",\n      \"f\",\n      \"ft\",\n      \"g\",\n      \"h\",\n      \"k\",\n      \"l\",\n      \"m\",\n      \"mp\",\n      \"n\",\n      \"nd\",\n      \"ng\",\n      \"nk\",\n      \"nt\",\n      \"p\",\n      \"pt\",\n      \"r\",\n      \"sk\",\n      \"sp\",\n      \"ss\",\n      \"st\",\n      \"t\",\n      \"v\",\n      \"w\",\n      \"y\",\n      \"z\",\n    ];\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    this.words = [];\n\n    for (const iter of product(initial_consonants, vowels, final_consonants)) {\n      this.words.push(iter.join(\"\"));\n    }\n\n    return this.words;\n  }\n}\n", "export const ENTROPY_PER_LEVEL = 32;\nexport const ASCII_CHARACTERS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nexport const NUMBERS = \"0123456789\";\n", "import { getPreferenceValues } from \"@raycast/api\";\n\nexport type Preferences = {\n  specialCharacters: string;\n  strength: number;\n  length: number;\n  delimiter: string;\n  maxWordLength: number;\n};\n\nconst usePreferences = (): Preferences => {\n  const { strength, length, maxWordLength, ...preferences } = getPreferenceValues<Record<keyof Preferences, string>>();\n\n  return {\n    ...preferences,\n    strength: parseInt(strength, 10),\n    length: parseInt(length, 10),\n    maxWordLength: parseInt(maxWordLength, 10),\n  } as Preferences;\n};\n\nexport default usePreferences;\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport default function* product<T extends Array<Iterable<any>>>(\n  ...iterables: T\n): IterableIterator<{\n  [K in keyof T]: T[K] extends Iterable<infer U> ? U : never;\n}> {\n  if (iterables.length === 0) {\n    return;\n  }\n  // make a list of iterators from the iterables\n  const iterators = iterables.map((it) => it[Symbol.iterator]());\n  const results = iterators.map((it) => it.next());\n  if (results.some((r) => r.done)) {\n    throw new Error(\"Input contains an empty iterator.\");\n  }\n\n  for (let i = 0; ; ) {\n    if (results[i].done) {\n      // reset the current iterator\n      iterators[i] = iterables[i][Symbol.iterator]();\n      results[i] = iterators[i].next();\n      // advance, and exit if we've reached the end\n      if (++i >= iterators.length) {\n        return;\n      }\n    } else {\n      yield results.map(({ value }) => value) as any;\n      i = 0;\n    }\n    results[i] = iterators[i].next();\n  }\n}\n", "import { Action, ActionPanel, List } from \"@raycast/api\";\nimport type { PasswordGenerator } from \"./utils/types\";\nimport { getStrengthIcon } from \"./utils/getStrengthIcon\";\n\ntype Props = {\n  generator: PasswordGenerator;\n  generatePasswords: () => void;\n};\n\nconst ListItem = ({ generator, generatePasswords }: Props): JSX.Element => (\n  <List.Item\n    key={generator.id}\n    title={generator.password}\n    subtitle={`Length: ${generator.password.length}`}\n    accessories={[{ text: generator.title }]}\n    icon={getStrengthIcon(generator.strength)}\n    actions={\n      <ActionPanel>\n        <Action.CopyToClipboard title=\"Copy Password\" content={generator.password} onCopy={generatePasswords} />\n        <Action.Paste content={generator.password} onPaste={generatePasswords} />\n      </ActionPanel>\n    }\n  />\n);\n\nexport default ListItem;\n", "import { Color, Image } from \"@raycast/api\";\n\nexport const getStrengthIcon = (strength: number): { source: Image.Source; tintColor?: Color.ColorLike } => {\n  const entropy = [\n    {\n      bits: 28,\n      color: \"#e44759\",\n      icon: \"\uD83D\uDC80\",\n      name: \"very_weak\",\n    },\n    {\n      bits: 35,\n      color: \"#f8b32d\",\n      icon: \"\uD83D\uDE22\",\n      name: \"weak\",\n    },\n    {\n      bits: 60,\n      color: \"#67a4d3\",\n      icon: \"\uD83D\uDE10\",\n      name: \"reasonable\",\n    },\n    {\n      bits: 128,\n      color: \"#33ccb1\",\n      icon: \"\uD83D\uDE0E\",\n      name: \"strong\",\n    },\n    {\n      bits: Infinity,\n      color: \"#33cc33\",\n      icon: \"\uD83E\uDD29\",\n      name: \"very_strong\",\n    },\n  ];\n\n  let source = entropy[0].icon;\n\n  for (const element of entropy) {\n    if (strength < element.bits) {\n      source = element.icon;\n      break;\n    }\n  }\n\n  return {\n    source,\n  };\n};\n"],
  "mappings": "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",
  "names": ["strength_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "import_crypto", "import_fs", "ASCII_CHARACTERS", "NUMBERS", "import_api", "usePreferences", "strength", "length", "maxWordLength", "preferences", "usePreferences_default", "product", "iterables", "iterators", "it", "results", "r", "i", "value", "PasswordGenerator", "strength", "length", "usePreferences_default", "password", "passwordStrength", "pw", "i", "AsciiGenerator", "ASCII_CHARACTERS", "NUMBERS", "AlphanumGenerator", "HexGenerator", "NumericGenerator", "DictionaryGenerator", "iterations", "index", "word", "pw_length", "err", "PronounceableGenerator", "initial_consonants", "final_consonants", "vowels", "iter", "product", "import_api", "getStrengthIcon", "strength", "entropy", "source", "element", "import_jsx_runtime", "ListItem", "generator", "generatePasswords", "getStrengthIcon", "ListItem_default", "import_jsx_runtime", "Command", "loading", "setLoading", "strengthLevel", "setStrengthLevel", "passwords", "setPasswords", "defaultPasswordStrength", "usePreferences_default", "generatePasswords", "strength", "DictionaryGenerator", "PronounceableGenerator", "AsciiGenerator", "AlphanumGenerator", "NumericGenerator", "HexGenerator", "generator", "ListItem_default"]
}
